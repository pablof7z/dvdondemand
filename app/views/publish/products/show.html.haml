- content_for :primary_nav do
  =render :partial => 'publish/shared/navbar'


#content
  .box.sp
    %h1= @product.title

    - if @product.cover_art.exists?(:medium)
      %a{:href => @product.cover_art.url, :alt => 'Full size Cover art', :target => 'blank'}
        =image_tag(@product.cover_art.url(:medium), :class => 'fl artw')
    %dl
      %dt Media Type:
      %dd= @product.media_type.name
      %dt Genre:
      %dd= @product.genre.title
      %dt Studio:
      %dd= @product.studio
      - unless @product.performers.blank?
        %dt #{@product.dvd? ? 'Actors' : 'Musicians' }:
        %dd= @product.performers

      %dt Description:
      %dd= @product.description

      - unless @product.keywords.blank?
        %dt Keywords:
        %dd= @product.keyword_list

      %dt Price:
      %dd= number_to_currency(@product.price)

      - unless @product.running_time.blank?
        %dt Running Time:
        %dd= @product.running_time

      %ul.tools
        %li= link_to 'Edit', edit_publish_publisher_product_path(current_publisher, @product), :class => 'edit'
        %li= link_to 'Delete', publish_publisher_product_path(current_publisher,@product), :method => 'delete', :class => 'delete', :confirm => t('web-app-theme.confirm', :default => 'Are you sure?')


  .box.sp
    %h2 ISO(s) for this product

    :javascript
      $(function() {
        $('a.remote-delete').click(function() {
          $.post(this.href, { _method: 'delete' }, null, "script");
          return false;
        });
      });

    - unless @product.isos.empty?
      = render :partial => 'publish/isos/iso', :collection => @product.isos, :locals => {:with_remote_delete => true}
    - else
      %p No ISO image(s) uploaded yet.


  .box.sp
    %h2 Upload new ISO

    - form_for Iso.new, :url => publish_product_isos_path(@product), :html => { :multipart => true } do |f|
      .group
        = f.label :iso, "ISO File", :class => :label
        = f.file_field :iso
        = render_uploadify :id => 'iso_iso', :url => publish_product_isos_path(@product), :allowed_extensions => [:iso], :max_size => 4.gigabytes, :allow_multiple_files => false
      .group.navform.wat-cf
        = uploadify_submit("Upload")
        = uploadify_cancel("Stop")


  .box.sp
    %h2 Available Packaging Options for this Product

    - form_for @product.product_options.build, :url => publish_publisher_product_options_path(current_publisher), :html => { :class => :form } do |f|
      - for option in PackagingOption.all
        = hidden_field_tag 'product_id', @product.id
        %p
          - std_clamshell = (option.price == 0)
          - html_options  = { :checked => std_clamshell, :disabled => std_clamshell }
          = check_box_tag 'packaging_option_ids[]', option.id, @product.packaging_options.include?(option), html_options
          = option.title
          (#{number_to_currency(option.price)})
        - unless option.description.blank?
          %span.description= option.description

      %button.button{:type => 'submit'}
        = image_tag("web-app-theme/tick.png", :alt => "Save")
        Save


  .box.sp
    %h2 Allocate Product to selected Catalogs

    - unless current_publisher.catalogs.blank?
      - form_for @product.catalogs.build, :url => publish_publisher_product_placements_path(current_publisher), :html => { :class => :form } do |f|
        = hidden_field_tag 'product_id', @product.id
        = label_tag :catalog_ids, "Catalogs", :class => :label
        - for catalog in current_publisher.catalogs
          %p
            = check_box_tag 'catalog_ids[]', catalog.id, @product.catalogs.include?(catalog)
            = catalog.title
        %button.button{:type => 'submit'}
          = image_tag("web-app-theme/tick.png", :alt => "Save")
          Save
    - else
      %p= link_to 'Create some catalogs first.', new_publish_publisher_catalog_path(current_publisher)

- content_for :sidebar, render(:partial => 'publish/shared/sidebar')

