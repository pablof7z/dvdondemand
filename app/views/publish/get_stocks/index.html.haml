- content_for :header do
  :javascript
    var shipping_price_per_disc = #{ShippingOption.per_disc_cost};
    var item_prices = [ #{@order.items.map { |i| i.price }.join(', ')} ];
    var packaging_prices = { #{PackagingOption.all.map { |po| "'#{po.id}': #{po.price}" }.join(', ')} };
    var shipping_prices = { #{ShippingOption.all.map { |so| "'#{so.id}': #{so.price}" }.join(', ')} };

    function currency(amount)
    {
      amount = String(amount);

      index = amount.indexOf('.');
      if (index == -1)
        return '$' + amount + '.00';

      decimal = amount.substr(index, 3);
      return '$' + amount.substring(0, index) + ((decimal.length==3)?decimal:decimal+'0');
    }

    function updateCosts()
    {
      totals = item_prices.reduce(function(subtotal, price, index)
      {
        quantity = Number($('#item_' + index + '_quantity').attr('value'));
        packaging_price = packaging_prices[$('#order_items_attributes_' + index + '_packaging_option_id').attr('value')];
        item_total = (price + packaging_price) * quantity;

        $('#item_' + index + '_total').html(currency(item_total));

        subtotal.total += item_total;
        subtotal.items_count += quantity;

        return subtotal;

      }, { total: 0, items_count: 0 });

      shipping = shipping_price_per_disc * totals.items_count + Number(shipping_prices[$('#order_shipping_option_id').attr('value')]);
      totals.total += shipping;

      $('#shipping_cost').html(currency(totals.items_count==0?0:shipping));
      $('#total_cost').html(currency(totals.items_count==0?0:totals.total));

    };
    $(document).ready(function()
    {
      for (i = 0; i < item_prices.length; i++)
      {
        $('#item_' + i + '_quantity').change(updateCosts);
        $('#item_' + i + '_quantity').keypress(function(event) { if (event.which == 13) { updateCosts(); return false; } });
        $('#order_items_attributes_' + i + '_packaging_option_id').change(updateCosts);
        $('#order_shipping_option_id').change(updateCosts);
      }
    });

- content_for :primary_nav do
  = render :partial => 'publish/shared/navbar'

#content.wide
  %h1 Get Stock
  %p There may be times when you will need a small stock of your DVD’s or CD’s for personal appearances or gigs. Order the desired amount of stock needed, and we’ll ship it out to the address you specify.
  %p We only charge our flat replicating fee. No credit card processing fees will be applied. 


  - form_for @order, :url => publish_publisher_get_stocks_path(current_publisher), :html => { :class => :form } do |f|
    = f.error_messages
    .box
      %table.t1
        %thead
          %tr
            %th.w10 ID
            %th Title
            %th.w20 Packaging
            %th.w10 Quantity
            %th.w10 Price
        %tbody
          - @order.items.each_with_index do |item, index|
            - fields_for 'order[items_attributes]', item, :index => index do |ff|
              %tr{:class => cycle("odd", "even")}
                %td
                  = ff.hidden_field :product_id
                  = ff.hidden_field :price, :id => "item_#{index}_price"
                  = ff.object.product.id
                %td
                  = link_to ff.object.product.title, publish_publisher_product_path(current_publisher,ff.object.product)
                %td
                  = ff.select :packaging_option_id, options_from_collection_for_select(ff.object.product.available_packaging_options, :id, :title_with_price), :html => { :id => "item_#{index}_packaging" }
                %td
                  =# raise item.methods.sort.join
                  = ff.text_field :quantity, :size => '6', :id => "item_#{index}_quantity"
                %td{:id => "item_#{index}_total"} $0.00
          %tr{:class => cycle("odd", "even"), :style => 'border-top: solid 1px black;'}
            %td
            %td{:style => 'text-align: right; font-weight: bold;'} Shipping Option
            %td{:colspan => 2}
              = f.select :shipping_option_id, options_from_collection_for_select(ShippingOption.all, :id, :title_with_price)
              = "+ #{number_to_currency(ShippingOption.per_disc_cost)} per disc"
            %td{:id => 'shipping_cost'} $0.00
        %tfoot
          %th
          %th
          %th
          %th{:style => 'text-align: right;'} Total
          %th{:id => 'total_cost'} $0.00

    .box
      %h3 Credit Card
      %label{:for => 'card_type'}
        %span Card Type
        = f.select :card_type, [['Visa','visa'], ['MasterCard','mastercard'], ['Discover','discover'], ['American Express', 'american_express']]
      %label{:for => 'card_number'}
        %span Card Number
        = f.text_field :card_number
      %label{:for => 'card_verification'}
        %span Card Verification
        = f.text_field :card_verification, :size => '6'
      %label{:for => 'card_expires_on'}
        %span Card Expires On
        = f.date_select :card_expires_on, :discard_day => true, :start_year => Date.today.year, :add_month_numbers => true, :order => [ :month, :year ]

    .box
      %h3 Shipping Address
      %label{:for => 'shipping_name'}
        %span Ship to
        = f.text_field :shipping_name, :value => current_publisher.full_name
      %label{:for => 'shipping_address1'}
        %span Address 1
        = f.text_field :shipping_address1, :value => current_publisher.address1
      %label{:for => 'shipping_address2'}
        %span Address 2
        = f.text_field :shipping_address2, :value => current_publisher.address2
      %label{:for => 'shipping_city'}
        %span City
        = f.text_field :shipping_city, :value => current_publisher.city
      %label{:for => 'shipping_state'}
        %span State (US only)
        = f.select :shipping_state, us_state_options_for_select(current_publisher.state, :include_blank => true)
      %label{:for => 'shipping_zip_code'}
        %span Zip Code
        = f.text_field :shipping_zip_code, :value => current_publisher.zip_code, :size => '6'
      %label{:for => 'shipping_country'}
        %span Country
        = f.country_select :shipping_country, { "United States" => "US" }

    -# hidden fields for helper attr_accessor methods
    = f.hidden_field :publisher_id, :value => current_publisher.id
    = f.hidden_field :first_name,   :value => current_publisher.first_name
    = f.hidden_field :last_name,    :value => current_publisher.last_name
    = f.hidden_field :ip_address,   :value => request.remote_ip

    %p.clear
    %p{:align => 'center'}
      %button.b1{:type => 'submit'} Get Stock!

