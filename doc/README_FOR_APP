Use this README file to introduce your application and point to useful places in the API for learning more.
Run "rake doc:app" to generate API documentation for your models, controllers, helpers, and libraries.


## ActiveMerchant 1.9.0 and First Data (a.k.a. LinkPoint) gateway support

Log in to the Virtual Terminal and:

1 - Under "Support > Download Center > Download Now" use "111111111" as your Tax ID for your test account. Then download "For API" .pem certificate.

2 - Under "Administration > Basic Fraud Settings" set "Duplicate Lockout Time" from 10 minutes (default) to 0, so your tests work.



## About Uploadify.com integration using uploadify_rails plugin

Uploadify.com integration with a Rails application has multiple well-documented issues regarding sessions, authentication tokens, some Rack middleware, correct Mime-types assignement, etc. All can be set up "manually", but the uploadify_rails plugin provides all that convenintly packed in a single place (mostly).

Also, regardless of what is said in the uploadify_rails README, the Uploadify integration does not require jQueryUI.

Reference resources:

* http://github.com/alainbloch/uploadify_rails
* http://railstips.org/blog/archives/2009/07/21/uploadify-and-rails23/
* http://timmyc.posterous.com/uploadify-on-rails-with-paperclip

Most challenging was honoring the default JSON response format configuration in uploadify_rails with something actually useful for this application. Although there are some Uploadify-on-Rails project examples on GitHub, few actually get the JSON part right; kudos go to:

* http://github.com/martinhawkins/Uploadify-with-Paperclip-on-Rails-example.git
* http://github.com/pkordel/uploadify_paperclip_demo.git

Not specific Uploadify-related, but a great reference for JSON and jQuery usage on Rails:

* http://paydrotalks.com/posts/45-standard-json-response-for-rails-and-jquery

Another issue was taking into consideration the InheritedResources' controllers used throughout the application and overriding it's default format responses (as can be seen in app/controllers/publish/isos_controller.rb). Most helpful was this Gist (as it also dealt with Uploadify *and* InheritedResources):

* https://gist.github.com/342155

With all mentioned previously in-place, the only thing missing was to change the uploadify_rails' plugin uploadify_rails_helper.rb file to actually *execute* some JSON-formatted callbacks sent from the server on successful Uploadify completion. The lines changed were:

    onComplete    : function(event, queueID, fileObj, response, data) {
      var datum = eval('('+response+')');
      if (datum.result == "success") {
        $.getScript(datum.source);
      }
    },

Tested on development with Uploadify 2.1.0 (uploadify_rails' default) and jQuery 1.4.3 (Uploadify 2.1.1 requires jQuery 1.4.2)

Also, "Remote" ISO deletion using jQuery thanks to:

* http://travisonrails.com/2009/05/20/rails-delete-requests-with-jquery
* http://stackoverflow.com/questions/1234432/rails-destroy-confirm-with-jquery-ajax


## About Devise auth. gem usage

Devise's RDdoc documentation is great, be sure to read it thoroughly!

Another great resource is it's GitHub Wiki, be sure to check it for hands-on tips: http://github.com/plataformatec/devise/wiki/

Wiki-mentioned used so far, in application_controller.rb:

* custom layout according to Devise resource thanks to http://github.com/plataformatec/devise/wiki/How-To:-Create-custom-layouts
* custom sign out redirection according to Devise resource thanks to http://github.com/plataformatec/devise/wiki/How-To:-Change-the-redirect-path-after-destroying-a-session-%28signing-out%29

And in routes.rb ("map.publisher_root" rule), path used for publish/publishers_controller.rb#home:

* default route to be used after signing in thanks to http://webcache.googleusercontent.com/search?q=cache:j5n40xIYS2wJ:github.com/plataformatec/devise/wiki/How-To:-Redirect-to-a-specific-page-on-successful-sign-in+http://github.com/plataformatec/devise/wiki/howto-redirect-to-a-specific-page-on-successful-sign-in&cd=1&hl=en&ct=clnk&client=ubuntu



## About RailRoad gem usage

We're using the "tobias-railroad" fork of the RailRoad gem because it includes explicit patches to make it work with at least Rails 2.3.5.

Just run this command from the app. home directory:

    railroad -M --exclude=app/models/items_products.rb,app/models/catalogs_products.rb --hide-magic | neato -Tpng > doc/models.png

Notable options used:

* Include just the models in the graphic
* Exclude the associations' tables to avoid unnecesary clutter
* Hide Rails' "magic" columns/fields/attributes

